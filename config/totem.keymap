// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_38keys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys_hu.h"

#define XXX &none
#define TODO ___
#define ___ &trans

#define BASE 0
#define SYM 1
#define NUM 2
#define FUN 3
#define GAME 4

#include "combos.dtsi"

// hyper and meh keys
#define HYP LS(LC(LA(LGUI)))
#define MEH LS(LC(LALT))

/* ------------------------ general config ----------------------- */

#define QUICK_TAP_MS 175

// smart-layer config
&caps_word {
    // /delete-property/ ignore-modifiers; // mods deactivate, requires PR #1451
    /delete-property/ ignore-numbers;
    continue-list = <BACKSPACE ENTER DELETE UNDERSCORE MINUS>;
};

// key-repeat config
&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>; // repeat all keys
};

// sticky key aka 'one-shot mods'
&sk {
    release-after-ms = <2000>;
    quick-release;
};

// default layer-tap config
&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// special HRMs for the right meh key, as it involves a modmorph
MAKE_HRM(hmr_meh, &kp, &comma_morph, KEYS_L THUMBS)
// MAKE_HRM(hmr_lpar, &kp, &lpar, KEYS_L THUMBS)    // "    "   "   "
// MAKE_HRM(hmr_rpar, &kp, &rpar, KEYS_L THUMBS)    // "    "   "   "

// mod_morph keys
// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: comma | shift + tap: semicolon
ZMK_BEHAVIOR(comma_morph, mod_morph,
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: dot | shift + tap: colon
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

/ {
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp HU_Q         &kp HU_W         &kp HU_E            &kp HU_R          &kp HU_T           &kp HU_Z     &kp HU_U          &kp HU_I            &kp HU_O         &kp HU_P
                &hml LGUI HU_A  &hml LALT HU_S    &hml LSHIFT HU_D    &hml LCTRL HU_F   &kp HU_G           &kp HU_H     &hmr RCTRL HU_J   &hmr RSHIFT HU_K    &hmr LALT HU_L   &hmr RGUI HU_E_ACUTE
&kp HU_I_ACUTE  &kp HU_Y         &kp HU_X         &kp HU_C            &kp HU_V          &kp HU_B           &kp HU_N     &kp HU_M          &kp HU_COMMA   &kp HU_PERIOD     &kp HU_MINUS        &kp HU_A_ACUTE
                                              &kp ESC        &lt NUM TAB         &lt LSHFT SPACE          &lt FUN RET      &lt SYM BSPC       &kp DEL
            >;
        };
        symbol_layer {
            bindings = <
            &kp HU_APOS   &kp HU_DQT      &kp HU_GRAVE      &kp HU_CARET      &kp HU_PERCENT         &kp HU_BSLH        ___          ___          ___      ___
            &kp HU_LT     &kp HU_LBKT     &kp HU_LPAR       &kp HU_LBRC       &kp HU_EXCL            &kp HU_PIPE        &kp HU_SEMI          &kp HU_DOLLAR        &kp HU_EURO     ___
    ___     &kp HU_GT     &kp HU_RBKT     &kp HU_RPAR       &kp HU_RBRC       ___                    ___        &kp HU_TILDE         ___             ___      ___          ___
                                          &kp HU_HASH       &kp HU_AMPS       &kp HU_AT              ___       ___          ___
            >;
        };
        num_layer {
            bindings = <
            &kp KP_NUMLOCK  &kp HOME         &kp UP             &kp END             ___          &kp HU_STAR           &kp HU_N7       &kp HU_N8          &kp  HU_N9      &kp HU_PLUS
            &kp LGUI        &hml LALT LEFT   &hml LSHIFT DOWN   &hml LCTRL RIGHT    ___          &kp HU_EQUAL          &kp HU_N4       &kp HU_N5          &kp  HU_N6      &kp HU_MINUS
  ___       ___             &kp PG_UP        ___                &kp PG_DN           ___          &kp HU_SLASH          &kp HU_N1       &kp HU_N2          &kp  HU_N3      ___            ___
                                      ___             ___        ___                ___          &kp HU_N0             ___
            >;
        };
        fun_layer {
            bindings = <
            &bt BT_SEL 2           ___         &kp C_VOL_UP      &kp C_BRI_UP          &kp PSCRN          &kp F12      &kp F7       &kp F8          &kp F9      ___
            &bt BT_SEL 1           ___         &kp C_VOL_DN      &kp C_BRI_DN          ___                &kp F11      &kp F4       &kp F5          &kp F6      ___
&bt BT_CLR  &bt BT_SEL 0           ___         &kp C_MUTE        &kp C_BKLT_TOG        ___                &kp F10      &kp F1       &kp F2          &kp F3      ___    &tog GAME
                                      ___             ___             ___                        ___           ___               ___
            >;
        };
        game_layer {
            bindings = <
                ___ &kp HU_Q         &kp HU_W         &kp HU_E     &kp HU_R            &kp HU_T           &kp HU_Z     &kp HU_U          &kp HU_I            &kp HU_O
                &kp LSHIFT &kp HU_A         &kp HU_S         &kp HU_D     &kp HU_F            &kp HU_G           &kp HU_H     &kp HU_J   &kp HU_K    &kp HU_L
___ &kp LCTRL  &kp HU_Z         &kp HU_X         &kp HU_C            &kp HU_V            &kp HU_B           &kp HU_N     &kp HU_M          &kp HU_COMMA   &kp ESC     &tog GAME
                                              &kp LGUI        &kp LCTRL         &kp SPACE          &lt FUN RET      &lt SYM BSPC       &kp DEL
            >;
        };
    };
};

/* --------------------------------- combos --------------------------------- */
/*
   ╭────────────────────┬────────────────────╮     ╭─────────────────────┬─────────────────────╮
   │  0   1   2   3   4 │  5   6   7   8   9 │     │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
   │ 10  11  12  13  14 │ 15  16  17  18  19 │     │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  20 21  22  23  24  25 │ 26  27  28  29  30 31  LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5
   ╰───────╮ 32  33  34 │ 35  36  37 ╭───────╯     ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
           ╰────────────┴────────────╯                     ╰─────────────┴─────────────╯             */
// use global-quick-tap-ms for combos (requires PR 1387)
